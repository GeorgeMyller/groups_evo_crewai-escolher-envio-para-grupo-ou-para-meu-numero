# Stage 1: Build stage - Installs dependencies and builds artifacts
FROM python:3.12-slim AS builder

# Install system dependencies needed for build and runtime (cron, supervisor) + curl for uv
RUN apt-get update && apt-get install -y --no-install-recommends \
    cron \
    supervisor \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy dependency files first to leverage Docker cache
COPY pyproject.toml uv.lock* ./

# Install uv and then use it to install Python dependencies in the same RUN layer
RUN curl -Ls https://astral.sh/uv/install.sh | sh && \
    # Add the default uv installation directory to PATH for this RUN command
    export PATH="/root/.local/bin:$PATH" && \
    uv pip install --system .

# Copy the rest of the application code into the build stage
# Ensure .dockerignore is properly configured to exclude unnecessary files
COPY . .

# Stage 2: Final stage - Creates the lean runtime image
FROM python:3.12-slim

# Install only essential runtime system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    cron \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy installed Python packages from the build stage's system site-packages
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages

# Copy executables installed by pip (like streamlit) from the build stage
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy only necessary application files from the build stage
COPY --from=builder /app/WhatsApp_Group_Resumer.py ./WhatsApp_Group_Resumer.py
COPY --from=builder /app/group.py ./group.py
COPY --from=builder /app/group_controller.py ./group_controller.py
COPY --from=builder /app/groups_util.py ./groups_util.py
COPY --from=builder /app/message_sandeco.py ./message_sandeco.py
COPY --from=builder /app/send_sandeco.py ./send_sandeco.py
COPY --from=builder /app/summary_crew.py ./summary_crew.py
COPY --from=builder /app/summary_lite.py ./summary_lite.py
COPY --from=builder /app/summary.py ./summary.py
COPY --from=builder /app/task_scheduler.py ./task_scheduler.py
COPY --from=builder /app/pages ./pages/

# Copy supervisor configuration from the build stage
COPY --from=builder /app/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Setup cron: create an empty crontab file, set permissions, and load it
RUN touch /etc/cron.d/tasks_app && \
    chmod 0644 /etc/cron.d/tasks_app && \
    crontab /etc/cron.d/tasks_app



EXPOSE 8501

# Define the command to run supervisor, which manages cron and streamlit
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
