#!/bin/bash

# Script de diagn√≥stico r√°pido para problemas com agendamento
# Quick diagnostic script for scheduling problems

echo "üîß Diagn√≥stico R√°pido - WhatsApp Manager"
echo "======================================="

CONTAINER_NAME="groups-evo-crewai"

# Verificar se container est√° rodando
if ! docker ps --format "table {{.Names}}" | grep -q "$CONTAINER_NAME"; then
    echo "‚ùå PROBLEMA: Container n√£o est√° rodando"
    echo "   SOLU√á√ÉO: Execute 'docker-compose up -d'"
    exit 1
fi

echo "‚úÖ Container est√° rodando"

# Verificar se o Streamlit est√° acess√≠vel
echo ""
echo "üåê Testando acesso ao Streamlit..."
if curl -s http://localhost:8501 > /dev/null; then
    echo "‚úÖ Streamlit acess√≠vel na porta 8501"
else
    echo "‚ùå PROBLEMA: Streamlit n√£o acess√≠vel"
    echo "   Verifique os logs: docker logs $CONTAINER_NAME"
fi

# Verificar crontab
echo ""
echo "‚è∞ Verificando agendamentos..."
cron_output=$(docker exec "$CONTAINER_NAME" crontab -l 2>/dev/null)
if [ -n "$cron_output" ]; then
    echo "‚úÖ Tarefas agendadas encontradas:"
    echo "$cron_output" | grep "ResumoGrupo" | wc -l | xargs echo "   Quantidade:"
else
    echo "‚ö†Ô∏è  ATEN√á√ÉO: Nenhuma tarefa agendada encontrada"
    echo "   Agende tarefas atrav√©s do Streamlit"
fi

# Verificar arquivo .env
echo ""
echo "üîß Verificando configura√ß√£o..."
env_check=$(docker exec "$CONTAINER_NAME" test -f /app/.env && echo "existe" || echo "n√£o existe")
if [ "$env_check" = "existe" ]; then
    echo "‚úÖ Arquivo .env encontrado"
    
    # Verificar vari√°veis cr√≠ticas
    docker exec "$CONTAINER_NAME" bash -c '
        source /app/.env
        missing=0
        
        if [ -z "$WHATSAPP_NUMBER" ]; then
            echo "‚ùå WHATSAPP_NUMBER n√£o definido"
            missing=1
        fi
        
        if [ -z "$EVO_BASE_URL" ]; then
            echo "‚ùå EVO_BASE_URL n√£o definido"
            missing=1
        fi
        
        if [ -z "$EVO_INSTANCE_NAME" ]; then
            echo "‚ùå EVO_INSTANCE_NAME n√£o definido"
            missing=1
        fi
        
        if [ -z "$EVO_API_TOKEN" ]; then
            echo "‚ùå EVO_API_TOKEN n√£o definido"
            missing=1
        fi
        
        if [ -z "$EVO_INSTANCE_TOKEN" ]; then
            echo "‚ùå EVO_INSTANCE_TOKEN n√£o definido"
            missing=1
        fi
        
        if [ $missing -eq 0 ]; then
            echo "‚úÖ Todas as vari√°veis necess√°rias est√£o definidas"
        fi
    '
else
    echo "‚ùå PROBLEMA CR√çTICO: Arquivo .env n√£o encontrado"
    echo "   SOLU√á√ÉO: Crie o arquivo .env na raiz do projeto"
fi

# Verificar conectividade da API
echo ""
echo "üåê Testando conectividade da API..."
api_test=$(docker exec "$CONTAINER_NAME" timeout 10 python3 -c "
import sys
sys.path.insert(0, '/app/src')

try:
    from whatsapp_manager.infrastructure.api.evolution_client import EvolutionClientWrapper
    import os
    
    client = EvolutionClientWrapper(
        base_url=os.getenv('EVO_BASE_URL'),
        api_token=os.getenv('EVO_API_TOKEN'),
        instance_id=os.getenv('EVO_INSTANCE_NAME'),
        instance_token=os.getenv('EVO_INSTANCE_TOKEN')
    )
    
    if client.ping_api():
        print('API_OK')
    else:
        print('API_FAIL')
        
except Exception as e:
    print(f'API_ERROR:{str(e)}')
" 2>/dev/null)

case $api_test in
    "API_OK")
        echo "‚úÖ API acess√≠vel e funcionando"
        ;;
    "API_FAIL")
        echo "‚ùå PROBLEMA: API acess√≠vel mas n√£o funcional"
        echo "   Verifique os tokens e configura√ß√µes"
        ;;
    API_ERROR:*)
        echo "‚ùå PROBLEMA: Erro na API - ${api_test#API_ERROR:}"
        ;;
    *)
        echo "‚ùå PROBLEMA: N√£o foi poss√≠vel testar a API"
        echo "   Verifique as configura√ß√µes de rede"
        ;;
esac

# Verificar logs recentes
echo ""
echo "üìã √öltimos logs de execu√ß√£o..."
if docker exec "$CONTAINER_NAME" test -f /app/data/cron_execution.log; then
    echo "‚úÖ Log de execu√ß√£o encontrado:"
    docker exec "$CONTAINER_NAME" tail -3 /app/data/cron_execution.log
else
    echo "‚ö†Ô∏è  Nenhum log de execu√ß√£o encontrado ainda"
fi

# Verificar diret√≥rios de dados
echo ""
echo "üìÅ Verificando estrutura de dados..."
data_structure=$(docker exec "$CONTAINER_NAME" ls -la /app/data/ 2>/dev/null)
if [ -n "$data_structure" ]; then
    echo "‚úÖ Diret√≥rio de dados existe"
    csv_exists=$(echo "$data_structure" | grep -q "group_summary.csv" && echo "sim" || echo "n√£o")
    echo "   group_summary.csv: $csv_exists"
else
    echo "‚ùå PROBLEMA: Diret√≥rio de dados n√£o encontrado"
fi

echo ""
echo "üéØ RESUMO DO DIAGN√ìSTICO"
echo "======================="
echo "Para monitorar em tempo real:"
echo "  ./tools/monitor_docker_logs.sh"
echo ""
echo "Para testar execu√ß√£o manual:"
echo "  ./tools/test_manual_execution.sh"
echo ""
echo "Para ver logs do container:"
echo "  docker logs -f $CONTAINER_NAME"
