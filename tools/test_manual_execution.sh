#!/bin/bash

# Script para testar manualmente a execu√ß√£o de tarefas de resumo
# Script to manually test summary task execution

echo "üß™ Teste Manual de Execu√ß√£o de Tarefa / Manual Task Execution Test"
echo "=================================================================="

# Verificar se o container est√° rodando
CONTAINER_NAME="groups-evo-crewai"

if ! docker ps --format "table {{.Names}}" | grep -q "$CONTAINER_NAME"; then
    echo "‚ùå Container '$CONTAINER_NAME' n√£o est√° rodando!"
    echo "   Execute: docker-compose up -d"
    exit 1
fi

echo "‚úÖ Container '$CONTAINER_NAME' encontrado"
echo ""

# Fun√ß√£o para listar grupos dispon√≠veis
list_groups() {
    echo "üìã Buscando grupos dispon√≠veis no CSV..."
    docker exec "$CONTAINER_NAME" python3 -c "
import sys
sys.path.insert(0, '/app/src')

try:
    from whatsapp_manager.core.group_controller import GroupController
    import pandas as pd
    import os
    
    # Verificar se o arquivo group_summary.csv existe
    csv_path = '/app/data/group_summary.csv'
    if not os.path.exists(csv_path):
        print('‚ùå Arquivo group_summary.csv n√£o encontrado')
        print(f'   Procurado em: {csv_path}')
        sys.exit(1)
    
    # Carregar dados
    df = pd.read_csv(csv_path)
    
    if df.empty:
        print('‚ö†Ô∏è  Nenhum grupo encontrado no CSV')
    else:
        print(f'‚úÖ {len(df)} grupos encontrados:')
        print('=' * 50)
        for idx, row in df.iterrows():
            status = 'üü¢ Habilitado' if row.get('enabled', False) else 'üî¥ Desabilitado'
            print(f'{idx + 1:2d}. ID: {row[\"group_id\"]} | {status}')
            print(f'    Hor√°rio: {row.get(\"time\", \"N/A\")}')
            print(f'    Min. mensagens: {row.get(\"min_messages_summary\", \"N/A\")}')
            print()
            
except Exception as e:
    print(f'‚ùå Erro ao listar grupos: {str(e)}')
    import traceback
    traceback.print_exc()
" 2>/dev/null || echo "‚ùå Erro ao executar listagem de grupos"
}

# Fun√ß√£o para executar tarefa manualmente
execute_task() {
    local group_id=$1
    local task_name="ResumoGrupo_${group_id}"
    
    echo "üöÄ Executando tarefa manualmente..."
    echo "   Grupo ID: $group_id"
    echo "   Task Name: $task_name"
    echo ""
    
    # Criar arquivo de log espec√≠fico para este teste
    local test_log="/app/data/manual_test_$(date +%Y%m%d_%H%M%S).log"
    
    echo "üìù Logs ser√£o salvos em: $test_log"
    echo ""
    
    # Executar a tarefa usando o mesmo m√©todo que o cron
    docker exec "$CONTAINER_NAME" bash -c "
        echo 'Iniciando teste manual em $(date)' > $test_log
        echo 'Diret√≥rio atual: $(pwd)' >> $test_log
        echo 'Usu√°rio: $(whoami)' >> $test_log
        echo 'Vari√°veis de ambiente:' >> $test_log
        env | grep -E '(WHATSAPP|EVO_|PYTHONPATH)' >> $test_log
        echo '=========================' >> $test_log
        
        # Executar com o mesmo script que o cron usa
        /usr/local/bin/load_env.sh python3 /app/src/whatsapp_manager/core/summary.py --task_name $task_name 2>&1 | tee -a $test_log
        echo 'C√≥digo de sa√≠da: \$?' >> $test_log
    "
    
    echo ""
    echo "‚úÖ Execu√ß√£o finalizada. Verificando logs..."
    
    # Mostrar os √∫ltimos logs
    docker exec "$CONTAINER_NAME" tail -20 "$test_log"
}

# Fun√ß√£o para verificar logs de execu√ß√µes anteriores
check_execution_logs() {
    echo "üìã Verificando logs de execu√ß√µes do cron..."
    echo "==========================================="
    
    # Verificar log do cron
    if docker exec "$CONTAINER_NAME" test -f /app/data/cron_execution.log; then
        echo "üìÅ Log de execu√ß√µes do cron:"
        docker exec "$CONTAINER_NAME" tail -20 /app/data/cron_execution.log
    else
        echo "‚ö†Ô∏è  Log de execu√ß√µes do cron n√£o encontrado"
    fi
    
    echo ""
    
    # Verificar logs espec√≠ficos de tarefas
    docker exec "$CONTAINER_NAME" find /app/data -name "*.log" -type f | while read log_file; do
        echo "üìÅ $log_file:"
        docker exec "$CONTAINER_NAME" tail -5 "$log_file"
        echo ""
    done
}

# Menu principal
show_menu() {
    echo "Escolha uma op√ß√£o / Choose an option:"
    echo "1) üìã Listar grupos dispon√≠veis / List available groups"
    echo "2) üöÄ Executar tarefa manualmente / Execute task manually"
    echo "3) üìã Verificar logs de execu√ß√£o / Check execution logs"
    echo "4) üîç Diagn√≥stico de ambiente / Environment diagnosis"
    echo "5) üö™ Sair / Exit"
    echo ""
    read -p "Digite sua escolha (1-5): " choice
}

# Diagn√≥stico de ambiente
environment_diagnosis() {
    echo "üîç DIAGN√ìSTICO DO AMBIENTE:"
    echo "=========================="
    
    docker exec "$CONTAINER_NAME" bash -c '
        echo "üìÇ Estrutura de diret√≥rios:"
        ls -la /app/src/whatsapp_manager/core/ | grep summary
        echo ""
        
        echo "üêç Teste de importa√ß√£o:"
        cd /app
        python3 -c "
import sys
sys.path.insert(0, \"/app/src\")
try:
    from whatsapp_manager.core.summary import *
    print(\"‚úÖ Importa√ß√£o de summary.py: OK\")
except Exception as e:
    print(f\"‚ùå Erro na importa√ß√£o: {e}\")

try:
    from whatsapp_manager.core.group_controller import GroupController
    print(\"‚úÖ Importa√ß√£o de GroupController: OK\")
except Exception as e:
    print(f\"‚ùå Erro na importa√ß√£o: {e}\")
"
        echo ""
        
        echo "üìã Arquivos de dados:"
        ls -la /app/data/ 2>/dev/null || echo "Diret√≥rio /app/data n√£o encontrado"
    '
}

# Loop principal
while true; do
    show_menu
    
    case $choice in
        1)
            list_groups
            ;;
        2)
            echo ""
            read -p "Digite o Group ID para testar: " group_id
            if [ -n "$group_id" ]; then
                execute_task "$group_id"
            else
                echo "‚ùå Group ID n√£o pode estar vazio"
            fi
            ;;
        3)
            check_execution_logs
            ;;
        4)
            environment_diagnosis
            ;;
        5)
            echo "üëã Saindo..."
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida. Tente novamente."
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
    echo ""
done
