#!/bin/bash

# Script para diagnosticar diferen√ßas entre macOS e Docker
# Script to diagnose differences between macOS and Docker

echo "üîç Diagn√≥stico: Compara√ß√£o macOS vs Docker"
echo "=========================================="

CONTAINER_NAME="groups-evo-crewai"

# Verificar se container est√° rodando
if ! docker ps --format "table {{.Names}}" | grep -q "$CONTAINER_NAME"; then
    echo "‚ùå Container n√£o est√° rodando"
    echo "   Execute: docker-compose up -d"
    exit 1
fi

echo "‚úÖ Container encontrado: $CONTAINER_NAME"
echo ""

# Fun√ß√£o para testar no macOS local
test_local_macos() {
    echo "üçé TESTE NO MACOS LOCAL"
    echo "======================"
    
    echo "üìÇ Diret√≥rio atual:"
    pwd
    
    echo ""
    echo "üêç Vers√£o do Python:"
    python3 --version
    
    echo ""
    echo "üìã Vari√°veis de ambiente cr√≠ticas:"
    echo "WHATSAPP_NUMBER: ${WHATSAPP_NUMBER:-[N√ÉO DEFINIDO]}"
    echo "EVO_BASE_URL: ${EVO_BASE_URL:-[N√ÉO DEFINIDO]}"
    echo "EVO_INSTANCE_NAME: ${EVO_INSTANCE_NAME:-[N√ÉO DEFINIDO]}"
    echo "PYTHONPATH: ${PYTHONPATH:-[N√ÉO DEFINIDO]}"
    
    echo ""
    echo "üß™ Teste de importa√ß√£o (macOS):"
    PYTHONPATH="./src:$PYTHONPATH" python3 -c "
import sys
print(f'Python version: {sys.version}')
print(f'Python path: {sys.path}')
print()

try:
    from whatsapp_manager.core.group_controller import GroupController
    print('‚úÖ GroupController importado com sucesso')
except Exception as e:
    print(f'‚ùå Erro ao importar GroupController: {e}')

try:
    from whatsapp_manager.core.summary_crew import SummaryCrew
    print('‚úÖ SummaryCrew importado com sucesso')
except Exception as e:
    print(f'‚ùå Erro ao importar SummaryCrew: {e}')

try:
    from whatsapp_manager.core.send_sandeco import SendSandeco
    print('‚úÖ SendSandeco importado com sucesso')
except Exception as e:
    print(f'‚ùå Erro ao importar SendSandeco: {e}')

try:
    from whatsapp_manager.utils.logger import get_logger
    print('‚úÖ Logger importado com sucesso')
except Exception as e:
    print(f'‚ùå Erro ao importar Logger: {e}')
"
    
    echo ""
    echo "üåê Teste de conectividade API (macOS):"
    PYTHONPATH="./src:$PYTHONPATH" python3 -c "
import sys
import os
sys.path.insert(0, './src')

try:
    from whatsapp_manager.infrastructure.api.evolution_client import EvolutionClientWrapper
    
    client = EvolutionClientWrapper(
        base_url=os.getenv('EVO_BASE_URL'),
        api_token=os.getenv('EVO_API_TOKEN'),
        instance_id=os.getenv('EVO_INSTANCE_NAME'),
        instance_token=os.getenv('EVO_INSTANCE_TOKEN')
    )
    
    print('‚úÖ Cliente Evolution criado')
    
    if client.ping_api():
        print('‚úÖ API acess√≠vel')
        status = client.check_connection_status()
        print(f'   Estado: {status.get(\"state\", \"unknown\")}')
        print(f'   Conectado: {status.get(\"connected\", False)}')
    else:
        print('‚ùå API n√£o acess√≠vel')
        
except Exception as e:
    print(f'‚ùå Erro: {e}')
"
}

# Fun√ß√£o para testar no Docker
test_docker() {
    echo "üê≥ TESTE NO DOCKER"
    echo "=================="
    
    echo "üìÇ Informa√ß√µes do container:"
    docker exec "$CONTAINER_NAME" bash -c "
        echo \"Diret√≥rio atual: \$(pwd)\"
        echo \"Usu√°rio: \$(whoami)\"
        echo \"Sistema: \$(uname -a)\"
    "
    
    echo ""
    echo "üêç Vers√£o do Python no Docker:"
    docker exec "$CONTAINER_NAME" python3 --version
    
    echo ""
    echo "üìã Vari√°veis de ambiente no Docker:"
    docker exec "$CONTAINER_NAME" bash -c "
        echo \"WHATSAPP_NUMBER: \${WHATSAPP_NUMBER:-[N√ÉO DEFINIDO]}\"
        echo \"EVO_BASE_URL: \${EVO_BASE_URL:-[N√ÉO DEFINIDO]}\"
        echo \"EVO_INSTANCE_NAME: \${EVO_INSTANCE_NAME:-[N√ÉO DEFINIDO]}\"
        echo \"PYTHONPATH: \${PYTHONPATH:-[N√ÉO DEFINIDO]}\"
    "
    
    echo ""
    echo "üß™ Teste de importa√ß√£o (Docker):"
    docker exec "$CONTAINER_NAME" python3 -c "
import sys
print(f'Python version: {sys.version}')
print(f'Python path: {sys.path}')
print()

sys.path.insert(0, '/app/src')

try:
    from whatsapp_manager.core.group_controller import GroupController
    print('‚úÖ GroupController importado com sucesso')
except Exception as e:
    print(f'‚ùå Erro ao importar GroupController: {e}')
    import traceback
    traceback.print_exc()

try:
    from whatsapp_manager.core.summary_crew import SummaryCrew
    print('‚úÖ SummaryCrew importado com sucesso')
except Exception as e:
    print(f'‚ùå Erro ao importar SummaryCrew: {e}')
    import traceback
    traceback.print_exc()

try:
    from whatsapp_manager.core.send_sandeco import SendSandeco
    print('‚úÖ SendSandeco importado com sucesso')
except Exception as e:
    print(f'‚ùå Erro ao importar SendSandeco: {e}')
    import traceback
    traceback.print_exc()

try:
    from whatsapp_manager.utils.logger import get_logger
    print('‚úÖ Logger importado com sucesso')
except Exception as e:
    print(f'‚ùå Erro ao importar Logger: {e}')
    import traceback
    traceback.print_exc()
"

    echo ""
    echo "üåê Teste de conectividade API (Docker):"
    docker exec "$CONTAINER_NAME" bash -c "
        source /app/.env
        python3 -c \"
import sys
import os
sys.path.insert(0, '/app/src')

try:
    from whatsapp_manager.infrastructure.api.evolution_client import EvolutionClientWrapper
    
    client = EvolutionClientWrapper(
        base_url=os.getenv('EVO_BASE_URL'),
        api_token=os.getenv('EVO_API_TOKEN'),
        instance_id=os.getenv('EVO_INSTANCE_NAME'),
        instance_token=os.getenv('EVO_INSTANCE_TOKEN')
    )
    
    print('‚úÖ Cliente Evolution criado')
    
    if client.ping_api():
        print('‚úÖ API acess√≠vel')
        status = client.check_connection_status()
        print(f'   Estado: {status.get(\\\"state\\\", \\\"unknown\\\")}')
        print(f'   Conectado: {status.get(\\\"connected\\\", False)}')
    else:
        print('‚ùå API n√£o acess√≠vel')
        
except Exception as e:
    print(f'‚ùå Erro: {e}')
    import traceback
    traceback.print_exc()
\"
    "
}

# Fun√ß√£o para testar execu√ß√£o completa do summary.py
test_summary_execution() {
    echo ""
    echo "üß™ TESTE DE EXECU√á√ÉO DO SUMMARY.PY"
    echo "================================="
    
    # Buscar um group_id v√°lido
    group_id=""
    if [ -f "./data/group_summary.csv" ]; then
        group_id=$(head -2 "./data/group_summary.csv" | tail -1 | cut -d',' -f1)
        echo "Group ID encontrado no CSV local: $group_id"
    else
        # Tentar do Docker
        group_id=$(docker exec "$CONTAINER_NAME" bash -c "
            if [ -f /app/data/group_summary.csv ]; then
                head -2 /app/data/group_summary.csv | tail -1 | cut -d',' -f1
            fi
        ")
        echo "Group ID encontrado no Docker: $group_id"
    fi
    
    if [ -n "$group_id" ]; then
        echo ""
        echo "üçé Executando summary.py no macOS:"
        echo "--------------------------------"
        PYTHONPATH="./src:$PYTHONPATH" python3 ./src/whatsapp_manager/core/summary.py --task_name "ResumoGrupo_$group_id" || echo "‚ùå Falhou no macOS"
        
        echo ""
        echo "üê≥ Executando summary.py no Docker:"
        echo "-----------------------------------"
        docker exec "$CONTAINER_NAME" /usr/local/bin/load_env.sh python3 /app/src/whatsapp_manager/core/summary.py --task_name "ResumoGrupo_$group_id" || echo "‚ùå Falhou no Docker"
    else
        echo "‚ö†Ô∏è  Nenhum group_id encontrado para teste"
    fi
}

# Fun√ß√£o para comparar estruturas de arquivos
compare_file_structures() {
    echo ""
    echo "üìÅ COMPARA√á√ÉO DE ESTRUTURAS DE ARQUIVOS"
    echo "======================================="
    
    echo "üçé Estrutura local (macOS):"
    find ./src/whatsapp_manager -name "*.py" | head -10
    
    echo ""
    echo "üê≥ Estrutura no Docker:"
    docker exec "$CONTAINER_NAME" find /app/src/whatsapp_manager -name "*.py" | head -10
    
    echo ""
    echo "üìã Comparando arquivos espec√≠ficos:"
    
    # Verificar summary.py
    if [ -f "./src/whatsapp_manager/core/summary.py" ]; then
        echo "‚úÖ summary.py existe localmente"
        local_size=$(wc -c < "./src/whatsapp_manager/core/summary.py")
        echo "   Tamanho: $local_size bytes"
    else
        echo "‚ùå summary.py N√ÉO existe localmente"
    fi
    
    docker_summary_exists=$(docker exec "$CONTAINER_NAME" test -f /app/src/whatsapp_manager/core/summary.py && echo "sim" || echo "n√£o")
    if [ "$docker_summary_exists" = "sim" ]; then
        echo "‚úÖ summary.py existe no Docker"
        docker_size=$(docker exec "$CONTAINER_NAME" wc -c < /app/src/whatsapp_manager/core/summary.py)
        echo "   Tamanho: $docker_size bytes"
    else
        echo "‚ùå summary.py N√ÉO existe no Docker"
    fi
}

# Executar todos os testes
echo "Executando compara√ß√£o completa..."
echo ""

test_local_macos
echo ""
test_docker
echo ""
compare_file_structures
echo ""
test_summary_execution

echo ""
echo "üéØ RESUMO DO DIAGN√ìSTICO"
echo "======================="
echo "Compare os resultados acima para identificar diferen√ßas entre:"
echo "- Importa√ß√µes de m√≥dulos"
echo "- Conectividade da API"
echo "- Estrutura de arquivos"
echo "- Execu√ß√£o do script principal"
echo ""
echo "üí° Pr√≥ximos passos recomendados:"
echo "1. Se h√° erros de importa√ß√£o no Docker ‚Üí verificar PYTHONPATH"
echo "2. Se h√° erros de API no Docker ‚Üí verificar conectividade de rede"
echo "3. Se arquivos est√£o faltando ‚Üí rebuildar container"
echo "4. Se vari√°veis de ambiente est√£o faltando ‚Üí verificar .env"
